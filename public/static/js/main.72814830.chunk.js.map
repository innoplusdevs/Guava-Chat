{"version":3,"sources":["index.js"],"names":["socket","io","getTime","date","Date","getHours","substr","getMinutes","Chat","useState","username","setUsername","allMessages","setAllMessages","on","messages","message","length","MessageList","userId","id","className","Contact","Form","parentCallback","FormData","emit","Auth","props","onTrigger","event","state","value","setState","preventDefault","handleChange","bind","this","target","code","ctrlKey","trim","onSubmit","placeholder","autoComplete","type","onChange","onKeyUp","e","handleEnter","React","Component","contacts","setContacts","users","PeopleList","contactsList","map","user","time","People","firstLetter","toUpperCase","messagesList","Message","activePeople","messageId","msgOwner","name","setName","document","getElementById","sessionStorage","setItem","ReactDOM","render"],"mappings":"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","file":"static/js/main.72814830.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nlet socket = io();\r\n\r\nfunction getTime() {\r\n  let date = new Date();\r\n  let hours = (\"0\" + date.getHours()).substr(-2, 2);\r\n  let minutes = (\"0\" + date.getMinutes()).substr(-2, 2);\r\n  return hours + \":\" + minutes;\r\n}\r\n\r\nconst Chat = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [allMessages, setAllMessages] = useState([]);\r\n\r\n  socket.on('chat message', (messages) => {\r\n    setAllMessages(messages);\r\n  });\r\n\r\n  const handleCallbackMessage = (FormData) => {\r\n    if (FormData) {\r\n      socket.emit('chat message', FormData, username, socket.id, getTime());\r\n    }\r\n  };\r\n\r\n  let message;\r\n  if (allMessages.length) {\r\n    message = (\r\n      <MessageList\r\n        allMessages={allMessages}\r\n        userId={socket.id}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    username ?\r\n      <div className=\"wrapper\">\r\n        < div className=\"contacts\" >\r\n          <Contact />\r\n        </div >\r\n        <div className=\"chat\">\r\n          {message}\r\n        </div>\r\n        <Form parentCallback={handleCallbackMessage} />\r\n      </div >\r\n      : <Auth setUsername={setUsername} />\r\n  );\r\n\r\n}\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onTrigger = this.onTrigger.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleEnter(event) {\r\n    if (event.code === 'Enter' && event.ctrlKey) {\r\n      event.preventDefault();\r\n      this.props.parentCallback(event.target.value.trim(/(\\s|\\n|\\r)/));\r\n      this.setState({ value: \"\" });\r\n    }\r\n  }\r\n\r\n  onTrigger = (event) => {\r\n    this.props.parentCallback(this.state.value);\r\n    this.setState({ value: \"\" });\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"form\" onSubmit={this.onTrigger}>\r\n        <textarea\r\n          id=\"input\"\r\n          placeholder=\"Your message\"\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n          onKeyUp={(e) => this.handleEnter(e)}\r\n        />\r\n        <button id=\"sendButton\"></button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst Contact = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  socket.on('user join', function (users) {\r\n    setContacts(users);\r\n  });\r\n\r\n  return <PeopleList contacts={contacts} />;\r\n}\r\n\r\nfunction PeopleList({ contacts }) {\r\n  const contactsList = contacts.map(([user, , time]) => (\r\n    //key especificada dentro del array.\r\n    <People key={user} value={user} time={time} />\r\n  ));\r\n\r\n  return <ul id=\"Contacts-List\"> {contactsList} </ul>;\r\n}\r\n\r\nfunction People(props) {\r\n  const firstLetter = props.value.trim(' ')[0].toUpperCase();\r\n\r\n  return (\r\n    <li className=\"people\">\r\n      <div className=\"PeopleImage\">{firstLetter}</div>\r\n      <div className=\"PeopleInfo\">\r\n        <span>\r\n          <p className=\"PeopleName\"> {props.value}</p>\r\n          <p className=\"People-Date\"> {props.time} </p>\r\n        </span>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction MessageList({ allMessages, userId }) {\r\n  const messagesList = allMessages.map(([message, user, id, time]) => (\r\n    //key especificada dentro del array.\r\n    <Message key={message} value={message} activePeople={user} messageId={id} userId={userId} time={time} />\r\n  ));\r\n\r\n  return <ul id=\"messages\"> {messagesList} </ul>;\r\n}\r\n\r\nfunction Message(props) {\r\n  let msgOwner;\r\n\r\n  //take time\r\n  // const time = getTime();\r\n  const firstLetter = props.activePeople[0].trim(' ')[0].toUpperCase();\r\n\r\n  msgOwner = props.messageId === props.userId ? 'Me' : 'Other';\r\n  return (\r\n    <li className={msgOwner}>\r\n      {msgOwner === 'Other' && < div className=\"PeopleImage\">{firstLetter}</div>}\r\n      <span>\r\n        <p className=\"Message-User item\">{props.activePeople}</p>\r\n        <p className=\"Text item\">{props.value}</p>\r\n        <p className=\"Message-Date\">{props.time}</p>\r\n      </span>\r\n    </li >\r\n  );\r\n}\r\n\r\nconst Auth = ({ setUsername }) => {\r\n  const [name, setName] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setName(e.target.value);\r\n    document.getElementById('LoginError').className = \"Hide\";\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name.length < 1 || name.length > 10) {\r\n      document.getElementById('LoginError').className = \"Show\";\r\n    } else {\r\n      sessionStorage.setItem('username', name);\r\n      socket.emit('user join', name, getTime());\r\n      setUsername(name);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <h1>Guava Chat</h1>\r\n      <form onSubmit={handleSubmit} className=\"LoginForm\">\r\n        <input\r\n          className=\"LoginInput\"\r\n          type='text'\r\n          placeholder=\"Your username\"\r\n          autoComplete=\"off\"\r\n          onChange={handleChange}\r\n          value={name}\r\n        />\r\n        <button className=\"LoginSubmit\" type=\"submit\">Login</button>\r\n      </form>\r\n      <span id=\"LoginError\" className=\"Hide\">*Username must be between one and ten characters</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <Chat />,\r\n  document.getElementById(\"root\"));\r\n"],"sourceRoot":""}