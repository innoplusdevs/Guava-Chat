{"version":3,"sources":["index.js"],"names":["socket","io","getTime","date","Date","getHours","substr","getMinutes","Chat","useState","username","setUsername","allMessages","setAllMessages","userid","setUserid","on","id","console","log","messages","message","length","MessageList","userId","className","Contact","Form","parentCallback","FormData","emit","Auth","props","onTrigger","event","state","value","setState","preventDefault","handleChange","bind","this","target","code","ctrlKey","trim","onSubmit","placeholder","autoComplete","type","onChange","onKeyUp","e","handleEnter","React","Component","contacts","setContacts","users","PeopleList","contactsList","map","user","People","time","firstLetter","toUpperCase","messagesList","Message","activePeople","messageId","msgOwner","name","setName","document","getElementById","sessionStorage","setItem","ReactDOM","render"],"mappings":"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","file":"static/js/main.2924974c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nlet socket = io();\r\n\r\nfunction getTime() {\r\n  let date = new Date();\r\n  let hours = (\"0\" + date.getHours()).substr(-2, 2);\r\n  let minutes = (\"0\" + date.getMinutes()).substr(-2, 2);\r\n  return hours + \":\" + minutes;\r\n}\r\n\r\nconst Chat = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [allMessages, setAllMessages] = useState([]);\r\n  const [userid, setUserid] = useState('');\r\n\r\n  socket.on('id', (id) => {\r\n    setUserid(id);\r\n    console.log('id recibido', userid, 'socket', id);\r\n  });\r\n\r\n  socket.on('chat message', (messages) => {\r\n    setAllMessages(messages);\r\n    console.log('set Messages');\r\n  });\r\n\r\n  const handleCallbackMessage = (FormData) => {\r\n    console.log(userid);\r\n    if (FormData) {\r\n      socket.emit('chat message', FormData, username, userid);\r\n      console.log('emit Data');\r\n    }\r\n  };\r\n\r\n  let message;\r\n  if (allMessages.length) {\r\n    message = (\r\n      <MessageList\r\n        allMessages={allMessages}\r\n        userId={userid}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    username ?\r\n      <div className=\"wrapper\">\r\n        < div className=\"contacts\" >\r\n          <Contact />\r\n        </div >\r\n        <div className=\"chat\">\r\n          {message}\r\n        </div>\r\n        <Form parentCallback={handleCallbackMessage} />\r\n      </div >\r\n      : <Auth setUsername={setUsername} />\r\n  );\r\n\r\n}\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onTrigger = this.onTrigger.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleEnter(event) {\r\n    if (event.code === 'Enter' && event.ctrlKey) {\r\n      event.preventDefault();\r\n      this.props.parentCallback(event.target.value.trim(/(\\s|\\n|\\r)/));\r\n      this.setState({ value: \"\" });\r\n    }\r\n  }\r\n\r\n  onTrigger = (event) => {\r\n    this.props.parentCallback(this.state.value);\r\n    this.setState({ value: \"\" });\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"form\" onSubmit={this.onTrigger}>\r\n        <textarea\r\n          id=\"input\"\r\n          placeholder=\"Your message\"\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n          onKeyUp={(e) => this.handleEnter(e)}\r\n        />\r\n        <button id=\"sendButton\"></button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst Contact = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  socket.on('user join', function (users) {\r\n    setContacts(users);\r\n  });\r\n\r\n  return <PeopleList contacts={contacts} />;\r\n}\r\n\r\nfunction PeopleList({ contacts }) {\r\n  const contactsList = contacts.map(([user]) => (\r\n    //key especificada dentro del array.\r\n    <People key={user} value={user} />\r\n  ));\r\n\r\n  return <ul id=\"Contacts-List\"> {contactsList} </ul>;\r\n}\r\n\r\nfunction People(props) {\r\n  //take time\r\n  const time = getTime();\r\n  const firstLetter = props.value.trim(' ')[0].toUpperCase();\r\n\r\n  return (\r\n    <li className=\"people\">\r\n      <div className=\"PeopleImage\">{firstLetter}</div>\r\n      <div className=\"PeopleInfo\">\r\n        <span>\r\n          <p className=\"PeopleName\"> {props.value}</p>\r\n          <p className=\"People-Date\"> {time} </p>\r\n        </span>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction MessageList({ allMessages, userId }) {\r\n  console.log(allMessages, 'allMessages');\r\n  console.log(userId, 'userId');\r\n  const messagesList = allMessages.map(([message, user, id]) => (\r\n    //key especificada dentro del array.\r\n    <Message key={message} value={message} activePeople={user} messageId={id} userId={userId} />\r\n  ));\r\n  console.log('messages list');\r\n\r\n  return <ul id=\"messages\"> {messagesList} </ul>;\r\n}\r\n\r\nfunction Message(props) {\r\n  let msgOwner;\r\n\r\n  //take time\r\n  const time = getTime();\r\n  const firstLetter = props.activePeople[0].trim(' ')[0].toUpperCase();\r\n\r\n  console.log(props.messageId, props.userId)\r\n  msgOwner = props.messageId === props.userId ? 'Me' : 'Other';\r\n  return (\r\n    <li className={msgOwner}>\r\n      <div className=\"PeopleImage\">{firstLetter}</div>\r\n      <span>\r\n        <p className=\"Message-User item\">{props.activePeople}</p>\r\n        <p className=\"Text item\">{props.value}</p>\r\n        <p className=\"Message-Date\">{time}</p>\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nconst Auth = ({ setUsername }) => {\r\n  const [name, setName] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setName(e.target.value);\r\n    document.getElementById('LoginError').className = \"Hide\";\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name.length < 1 || name.length > 10) {\r\n      document.getElementById('LoginError').className = \"Show\";\r\n    } else {\r\n      sessionStorage.setItem('username', name);\r\n      socket.emit('user join', name);\r\n      setUsername(name);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <h1>Guava Chat</h1>\r\n      <form onSubmit={handleSubmit} className=\"LoginForm\">\r\n        <input\r\n          className=\"LoginInput\"\r\n          type='text'\r\n          placeholder=\"Your username\"\r\n          autoComplete=\"off\"\r\n          onChange={handleChange}\r\n          value={name}\r\n        />\r\n        <button className=\"LoginSubmit\" type=\"submit\">Login</button>\r\n      </form>\r\n      <span id=\"LoginError\" className=\"Hide\">*Username must be between one and ten characters</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <Chat />,\r\n  document.getElementById(\"root\"));\r\n"],"sourceRoot":""}